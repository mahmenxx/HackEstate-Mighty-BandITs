@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Verify Agent</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f9f9fb;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 60px;
        }

        h2 {
            color: #333;
            margin-bottom: 20px;
        }

        video {
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        #capture {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            margin-top: 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #capture:hover {
                background-color: #45a049;
            }

        canvas {
            display: none;
        }

        #status {
            margin-top: 20px;
            font-weight: 600;
            color: #555;
            min-height: 24px;
            transition: color 0.3s ease;
        }

            #status.success {
                color: #2e7d32;
            }

            #status.error {
                color: #d32f2f;
            }

        #loader {
            display: none;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h2>Verify Agent Identity</h2>

    <video id="video" width="320" height="240" autoplay></video>
    <br />
    <button id="capture">Capture & Verify</button>
    <canvas id="canvas" width="320" height="240"></canvas>

    <p id="status"></p>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const statusText = document.getElementById('status');
        const context = canvas.getContext('2d');

        // Get webcam access
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                video.srcObject = stream;
            })
            .catch(err => {
                showStatus("Failed to access webcam: " + err.message, "error");
            });

        document.getElementById('capture').addEventListener('click', async () => {
            // Take snapshot from video
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const base64Image = canvas.toDataURL('image/jpeg').split(',')[1];

            showStatus("Verifying, please wait...", "neutral");

            try {
                const response = await fetch('/FaceComparison/CompareImages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ capturedImageBase64: base64Image })
                });

                const result = await response.json();

                if (result.success) {
                    const confidence = result.data.confidence;
                    if (confidence >= 70) {
                        showStatus(`Face verified! Confidence: ${confidence.toFixed(1)}%. Redirecting...`, "success");
                        setTimeout(() => {
                            window.location.href = "/Home/Dashboard";
                        }, 1500);
                    } else {
                        showStatus("Face did not match. Please try again.", "error");
                    }
                } else {
                    showStatus("Error: " + result.message, "error");
                }
            } catch (error) {
                showStatus("Request failed: " + error.message, "error");
            }
        });

        function showStatus(message, type) {
            statusText.innerText = message;
            statusText.className = "";
            if (type === "success") statusText.classList.add("success");
            else if (type === "error") statusText.classList.add("error");
        }
    </script>
</body>
</html>
